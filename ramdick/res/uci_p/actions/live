BB=/res/busybox;

case $1 in
	gpu)
  echo Clock: $(($(cat /sys/devices/platform/gpusysfs/gpu_clock))) MHz
    ;;
	gpu_load)
  echo Load: $(($(cat /sys/class/misc/mali0/device/utilization))) %
    ;;
	 intlock)
  echo Clock: $(($(cat /sys/devices/bus_int.6/devfreq/bus_int.6/cur_freq))) MHz
    ;;
	BUSINTtime)
  STATE="";
  CNT=0;
  SUM=`$BB awk '{s+=$2} END {print s}' /sys/devices/bus_int.6/devfreq/bus_int.6/time_in_state_raw`;
		
  while read FREQ TIME; do
	if [ "$CNT" -ge $2 ] && [ "$CNT" -le $3 ]; then
		FREQ="$((FREQ / 1)) MHz:";
		if [ $TIME -ge "100" ]; then
			PERC=`$BB awk "BEGIN { print ( ($TIME / $SUM) * 100) }"`;
			PERC="`$BB printf "%0.1f\n" $PERC`%";
			TIME=$((TIME / 100));
			STATE="$STATE $FREQ `$BB echo - | $BB awk -v "S=$TIME" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'` ($PERC)@n";
		fi;
	fi;
	CNT=$((CNT+1));
  done < /sys/devices/bus_int.6/devfreq/bus_int.6/time_in_state_raw;
		
  STATE=${STATE%??};
  $BB echo "$STATE";
  ;;
  miflock)
  echo Clock: $(($(cat /sys/devices/bus_mif.7/devfreq/bus_mif.7/cur_freq))) MHz
    ;;
	BUSMIFtime)
  STATE="";
  CNT=0;
  SUM=`$BB awk '{s+=$2} END {print s}' /sys/devices/bus_mif.7/devfreq/bus_mif.7/time_in_state_raw`;
		
  while read FREQ TIME; do
	if [ "$CNT" -ge $2 ] && [ "$CNT" -le $3 ]; then
		FREQ="$((FREQ / 1)) MHz:";
		if [ $TIME -ge "100" ]; then
			PERC=`$BB awk "BEGIN { print ( ($TIME / $SUM) * 100) }"`;
			PERC="`$BB printf "%0.1f\n" $PERC`%";
			TIME=$((TIME / 100));
			STATE="$STATE $FREQ `$BB echo - | $BB awk -v "S=$TIME" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'` ($PERC)@n";
		fi;
	fi;
	CNT=$((CNT+1));
  done < /sys/devices/bus_mif.7/devfreq/bus_mif.7/time_in_state_raw;
		
  STATE=${STATE%??};
  $BB echo "$STATE";
  ;;
	GPUTime)
  STATE="";
  CNT=0;
  SUM=`$BB awk '{s+=$2} END {print s}' /sys/devices/11400000.mali/time_in_state`;
		
  while read FREQ TIME; do
	if [ "$CNT" -ge $2 ] && [ "$CNT" -le $3 ]; then
		FREQ="$((FREQ / 1)) MHz:";
		if [ $TIME -ge "100" ]; then
			PERC=`$BB awk "BEGIN { print ( ($TIME / $SUM) * 100) }"`;
			PERC="`$BB printf "%0.1f\n" $PERC`%";
			TIME=$((TIME / 100));
			STATE="$STATE $FREQ `$BB echo - | $BB awk -v "S=$TIME" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'` ($PERC)@n";
		fi;
	fi;
	CNT=$((CNT+1));
  done < /sys/devices/11400000.mali/time_in_state;
		
  STATE=${STATE%??};
  $BB echo "$STATE";
  ;;
	BatteryTemperature)
		BAT_C=`$BB awk '{ print $1 / 10 }' /sys/class/power_supply/battery/temp`;
		BAT_H=`$BB cat /sys/class/power_supply/battery/health`;

		$BB echo "$BAT_CÂ°C@nHealth: $BAT_H";
	;;
	CPUFrequency)
		CPU0=`$BB cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq 2> /dev/null`;
		CPU1=`$BB cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_cur_freq 2> /dev/null`;
		CPU2=`$BB cat /sys/devices/system/cpu/cpu2/cpufreq/scaling_cur_freq 2> /dev/null`;
		CPU3=`$BB cat /sys/devices/system/cpu/cpu3/cpufreq/scaling_cur_freq 2> /dev/null`;
		
		if [ -z "$CPU0" ]; then CPU0="Offline"; else CPU0="$((CPU0 / 1000)) MHz"; fi;
		if [ -z "$CPU1" ]; then CPU1="Offline"; else CPU1="$((CPU1 / 1000)) MHz"; fi;
		if [ -z "$CPU2" ]; then CPU2="Offline"; else CPU2="$((CPU2 / 1000)) MHz"; fi;
		if [ -z "$CPU3" ]; then CPU3="Offline"; else CPU3="$((CPU3 / 1000)) MHz"; fi;
		
		$BB echo "Core 0: $CPU0@nCore 1: $CPU1@nCore 2: $CPU2@nCore 3: $CPU3";
	;;
	Memory)
		while read TYPE MEM KB; do
			if [ "$TYPE" = "MemTotal:" ]; then
				TOTAL="$((MEM / 1024)) MB";
			elif [ "$TYPE" = "MemFree:" ]; then
				CACHED=$((MEM / 1024));
			elif [ "$TYPE" = "Cached:" ]; then
				FREE=$((MEM / 1024));
			fi;
		done < /proc/meminfo;
		
		FREE="$((FREE + CACHED)) MB";
		$BB echo "Total: $TOTAL@nFree: $FREE";
	;;
	Time)
		STATE="";
		CNT=0;
		SUM=`$BB awk '{s+=$2} END {print s}' /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state`;
		
		while read FREQ TIME; do
			if [ "$CNT" -ge $2 ] && [ "$CNT" -le $3 ]; then
				FREQ="$((FREQ / 1000)) MHz:";
				if [ $TIME -ge "100" ]; then
					PERC=`$BB awk "BEGIN { print ( ($TIME / $SUM) * 100) }"`;
					PERC="`$BB printf "%0.1f\n" $PERC`%";
					TIME=$((TIME / 100));
					STATE="$STATE $FREQ `$BB echo - | $BB awk -v "S=$TIME" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'` ($PERC)@n";
				fi;
			fi;
			CNT=$((CNT+1));
		done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state;
		
		STATE=${STATE%??};
		$BB echo "$STATE";
	;;
	UpTime)
		TOTAL=`$BB awk '{ print $1 }' /proc/uptime`;
		AWAKE=$((`$BB awk '{s+=$2} END {print s}' /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state` / 100));
		SLEEP=`$BB awk "BEGIN { print ($TOTAL - $AWAKE) }"`;
		
		PERC_A=`$BB awk "BEGIN { print ( ($AWAKE / $TOTAL) * 100) }"`;
		PERC_A="`$BB printf "%0.1f\n" $PERC_A`%";
		PERC_S=`$BB awk "BEGIN { print ( ($SLEEP / $TOTAL) * 100) }"`;
		PERC_S="`$BB printf "%0.1f\n" $PERC_S`%";
		
		TOTAL=`$BB echo - | $BB awk -v "S=$TOTAL" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
		AWAKE=`$BB echo - | $BB awk -v "S=$AWAKE" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
		SLEEP=`$BB echo - | $BB awk -v "S=$SLEEP" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
		$BB echo "Total: $TOTAL (100.0%)@nSleep: $SLEEP ($PERC_S)@nAwake: $AWAKE ($PERC_A)";
	;;
	UnUsed)
		UNUSED="";
		while read FREQ TIME; do
			FREQ="$((FREQ / 1000)) MHz";
			if [ $TIME -lt "100" ]; then
				UNUSED="$UNUSED$FREQ, ";
			fi;
		done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state;
		
		UNUSED=${UNUSED%??};
		$BB echo "$UNUSED";
	;;
esac;
