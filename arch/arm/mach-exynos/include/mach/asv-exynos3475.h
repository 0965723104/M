#ifndef _ASV_VOLTAGE_TABLE_H_
#define _ASV_VOLTAGE_TABLE_H_

#include <mach/asv-exynos.h>
#include <mach/asv-exynos_cal.h>
#include <mach/map.h>

#define CPU_MAX_VOLT		(1375000)
#define G3D_MAX_VOLT		(1250000)
#define INT_MAX_VOLT		(975000)
#define MIF_MAX_VOLT		(1087500)

#define SYSC_DVFS_END_LVL_CPU		15
#define SYSC_DVFS_END_LVL_G3D		8
#define SYSC_DVFS_END_LVL_MIF		8
#define SYSC_DVFS_END_LVL_INT		3
#define MAX_ASV_GROUP				16

#if 0 /* This physical address is used for firmware */
#define CHIPID_BASE         0x10000000
#define CHIPID_ASV_TBL_BASE 0x10004000
#endif

#define ASV_RUNTIME		(0)

#define SSA_VOLT_BASE	500000
#define SSA_VOLT_STEP	 25000
#define SSA_MAX_LIMIT	4

//#define EXYNOS3475_SYSREG_CPU_ADDR(x)		(EXYNOS3475_VA_SYSREG_CPU + (x))
//#define EXYNOS3475_SYSREG_G3D_ADDR(x)		(EXYNOS3475_VA_SYSREG_G3D + (x))
#define EXYNOS3475_SYSREG_CPU_ADDR(x)		(S5P_VA_SYSREG_CPU + (x))
#define EXYNOS3475_SYSREG_G3D_ADDR(x)		(S5P_VA_SYSREG_G3D + (x))

// EMA
#define EXYNOS3475_SYSREG_CPU_EMA_CON               EXYNOS3475_SYSREG_CPU_ADDR(0x330)
#define EXYNOS3475_SYSREG_CPU_EMA_HD_CON            EXYNOS3475_SYSREG_CPU_ADDR(0x334)
#define EXYNOS3475_SYSREG_CPU_EMA_STATUS            EXYNOS3475_SYSREG_CPU_ADDR(0x340)
#define EXYNOS3475_SYSREG_CPU_EMA_HD_STATUS         EXYNOS3475_SYSREG_CPU_ADDR(0x344)
#define EXYNOS3475_SYSREG_CPU_EMA_RF1_HD_CON_CPU    EXYNOS3475_SYSREG_CPU_ADDR(0x350)
#define EXYNOS3475_SYSREG_CPU_EMA_RF1_HS_CON_CPU    EXYNOS3475_SYSREG_CPU_ADDR(0x354)

#define EXYNOS3475_SYSREG_G3D_EMA_RA1_HD_CON        EXYNOS3475_SYSREG_G3D_ADDR (0x300)
#define EXYNOS3475_SYSREG_G3D_EMA_RA1_HS_CON        EXYNOS3475_SYSREG_G3D_ADDR (0x304)
#define EXYNOS3475_SYSREG_G3D_EMA_RA2_HD_CON        EXYNOS3475_SYSREG_G3D_ADDR (0x308)
#define EXYNOS3475_SYSREG_G3D_EMA_RF1_HD_CON        EXYNOS3475_SYSREG_G3D_ADDR (0x310)
#define EXYNOS3475_SYSREG_G3D_EMA_RF1_HS_CON        EXYNOS3475_SYSREG_G3D_ADDR (0x314)
#define EXYNOS3475_SYSREG_G3D_EMA_RF2_HD_CON        EXYNOS3475_SYSREG_G3D_ADDR (0x318)
#define EXYNOS3475_SYSREG_G3D_EMA_RF2_HS_CON        EXYNOS3475_SYSREG_G3D_ADDR (0x31C)
#define EXYNOS3475_SYSREG_G3D_EMA_UHD_CON           EXYNOS3475_SYSREG_G3D_ADDR (0x320)

#define CHIPID_BASE				S5P_VA_CHIPID
#define CHIPID_ASV_TBL_BASE		S5P_VA_CHIPID2
#define CHIPID_ABB_TBL_BASE		S5P_VA_CHIPID3

#define get_asv_cpu_group()     __getbits(CHIPID_ASV_TBL_BASE+0x00,  0,  0xf)
#define get_asv_cpu_modify()    __getbits(CHIPID_ASV_TBL_BASE+0x00,  4,  0xf)
#define get_asv_cpu_boost0()    __getbits(CHIPID_ASV_TBL_BASE+0x00,  8,  0x3)
#define get_asv_cpu_boost1()    __getbits(CHIPID_ASV_TBL_BASE+0x00,  10, 0x3)
#define get_asv_cpu_ssa()       __getbits(CHIPID_ASV_TBL_BASE+0x00,  12, 0xf)

#define get_asv_g3d_group()     __getbits(CHIPID_ASV_TBL_BASE+0x00,  16, 0xf)
#define get_asv_g3d_modify()    __getbits(CHIPID_ASV_TBL_BASE+0x00,  20, 0xf)
#define get_asv_g3d_boost0()    __getbits(CHIPID_ASV_TBL_BASE+0x00,  24, 0x3)
#define get_asv_g3d_boost1()    __getbits(CHIPID_ASV_TBL_BASE+0x00,  26, 0x3)
#define get_asv_g3d_ssa()       __getbits(CHIPID_ASV_TBL_BASE+0x00,  28, 0xf)

#define get_asv_mif_group()     __getbits(CHIPID_ASV_TBL_BASE+0x04,  0,  0xf)
#define get_asv_mif_modify()    __getbits(CHIPID_ASV_TBL_BASE+0x04,  4,  0xf)
#define get_asv_mif_boost0()    __getbits(CHIPID_ASV_TBL_BASE+0x04,  8,  0x3)
#define get_asv_mif_boost1()    __getbits(CHIPID_ASV_TBL_BASE+0x04,  10, 0x3)
#define get_asv_mif_ssa()       __getbits(CHIPID_ASV_TBL_BASE+0x04,  12, 0xf)

#define get_asv_int_group()     __getbits(CHIPID_ASV_TBL_BASE+0x04,  16, 0xf)
#define get_asv_int_modify()    __getbits(CHIPID_ASV_TBL_BASE+0x04,  20, 0xf)
#define get_asv_int_boost0()    __getbits(CHIPID_ASV_TBL_BASE+0x04,  24, 0x3)
#define get_asv_int_boost1()    __getbits(CHIPID_ASV_TBL_BASE+0x04,  26, 0x3)
#define get_asv_int_ssa()       __getbits(CHIPID_ASV_TBL_BASE+0x04,  28, 0xf)

#define get_asv_method()            __getbits(CHIPID_ASV_TBL_BASE+0x08,  7,  0x1)
#define get_asv_table_version()     __getbits(CHIPID_ASV_TBL_BASE+0x08,  0,  0x7f)
//#define get_asv_ids()               __getbits(CHIPID_ASV_TBL_BASE+0x08,  8,  0xff)
//#define get_asv_hpm()               __getbits(CHIPID_ASV_TBL_BASE+0x08,  16, 0xff)
//#define get_asv_ro()                __getbits(CHIPID_ASV_TBL_BASE+0x08,  24, 0xff)

u32 get_asv_ids()
{
	return __getbits(CHIPID_ASV_TBL_BASE+0x08,  8,  0xff);
}

u32 get_asv_hpm()
{
	return __getbits(CHIPID_ASV_TBL_BASE+0x08,  16, 0xff);
}

u32 get_asv_ro()
{
	return __getbits(CHIPID_ASV_TBL_BASE+0x08,  24, 0xff);
}

const u32 ema_table_cpu[SYSC_DVFS_END_LVL_CPU+1][MAX_ASV_GROUP]  = {	
	[0]  = {	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	},
	[1]  = {	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	},
	[2]  = {	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	},
	[3]  = {	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	},
	[4]  = {	1,	1,	1,	1,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	},
	[5]  = {	1,	1,	1,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	},
	[6]  = {	1,	1,	3,	3,	3,	3,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[7]  = {	3,	3,	3,	3,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[8]  = {	3,	3,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[9]  = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[10] = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[11] = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[12] = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[13] = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[14] = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
};
const u32 ema_table_g3d[SYSC_DVFS_END_LVL_G3D+1][MAX_ASV_GROUP]  = {
	[0] = {	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	},
	[1] = {	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	},
	[2] = {	1,	1,	1,	1,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	},
	[3] = {	1,	1,	1,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	},
	[4] = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[5] = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[6] = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
	[7] = {	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	},
};

const u32 ids_hpm_table_cpu[4][MAX_ASV_GROUP] = {
	[0] = { 0,  3,  4,  6,  7,  8, 10, 12, 15, 18, 23, 28, 35, 43, 44, 45, },
	[1] = { 0,  3,  5,  6,  7,  9, 11, 14, 17, 22, 27, 34, 42, 43, 44, 45, },
	[2] = { 0, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 41, 42, },
	[3] = { 0, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 40, 41, 42, },
};

const u32 volt_table_cpu[SYSC_DVFS_END_LVL_CPU+1][MAX_ASV_GROUP+1]  = {
	[0]  = { 1703, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, },
	[1]  = { 1586, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, 1250000, },
	[2]  = { 1495, 1250000, 1250000, 1225000, 1200000, 1175000, 1150000, 1125000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, },
	[3]  = { 1404, 1225000, 1225000, 1200000, 1175000, 1150000, 1125000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, },
	[4]  = { 1300, 1125000, 1125000, 1100000, 1075000, 1050000, 1025000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,  1000000, 1000000, 1000000, },
	[5]  = { 1196, 1100000, 1100000, 1075000, 1050000, 1025000, 1000000,  975000,  975000,  975000,  975000,  975000,  975000,  975000,  975000,  975000,  975000,  },
	[6]  = { 1105, 1075000, 1075000, 1050000, 1025000, 1000000,  975000,  950000,  950000,  950000,  950000,  950000,  950000,  950000, 950000,  950000,  950000, },
	[7]  = { 1001, 1025000, 1025000, 1000000,  975000,  950000,  925000,  900000,  900000,  900000,  900000,  900000,  900000,  900000,  900000,  900000,  900000, },
	[8]  = {  897,  975000,  975000,  950000,  925000,  900000,  875000,  850000,  850000,  850000,  850000,  850000,  850000,  850000, 850000,  850000,  850000, },
	[9]  = {  806,  750000,  725000,  700000,  675000,  650000,  625000,  600000,  600000,  600000,  600000,  600000,  600000,  600000, 600000,  600000,  600000, },
	[10] = {  702,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[11] = {  598,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[12] = {  507,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[13] = {  403,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[14] = {  299,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
};
const u32 volt_table_g3d[SYSC_DVFS_END_LVL_G3D+1][MAX_ASV_GROUP+1]  = {
	[0] = { 910, 1225000, 1225000, 1225000, 1200000, 1175000, 1150000, 1125000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, },
	[1] = { 845, 1200000, 1200000, 1175000, 1150000, 1125000, 1100000, 1075000, 1075000, 1075000, 1075000, 1075000, 1075000, 1075000, 1075000, 1075000, 1075000, },
	[2] = { 734, 1150000, 1150000, 1125000, 1100000, 1075000, 1050000, 1025000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, },
	[3] = { 667, 1125000, 1125000, 1100000, 1075000, 1050000, 1025000, 1000000,  975000,  975000,  975000,  975000,  975000,  975000,  975000,  975000,  975000, },
	[4] = { 533, 1000000, 1000000,  975000,  950000,  925000,  900000,  875000,  850000,  825000,  825000,  825000,  825000,  825000,  825000,  825000,  825000, },
	[5] = { 350,  850000,  850000,  825000,  800000,  775000,  750000,  725000,  725000,  725000,  725000,  725000,  725000,  725000,  725000,  725000,  725000, },
	[6] = { 266,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[7] = { 160,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
};

const u32 volt_table_mif[SYSC_DVFS_END_LVL_MIF+1][MAX_ASV_GROUP+1]  = {
	[0] = { 825, 1067500, 1067500, 1050000, 1037500, 1025000, 1012500, 1000000,  987500,  975000,  967500,  950000,  937500,  925000, 912500, 912500, 912500, },
	[1] = { 728, 1012500, 1012500, 1000000,  987500,  975000,  967500,  950000,  937500,  925000,  912500,  912500,  912500,  900000, 887500, 887500, 887500, },
	[2] = { 666,  967500,  967500,  950000,  937500,  925000,  912500,  900000,  887500,  875000,  862500,  850000,  850000,  850000, 850000, 850000, 850000, },
	[3] = { 559,  912500,  912500,  900000,  887500,  875000,  867500,  850000,  837500,  825000,  812500,  800000,  800000,  800000, 800000,  800000, 800000, },
	[4] = { 413,  887500,  887500,  875000,  862500,  850000,  837500,  825000,  812500,  800000,  787500,  775000,  762500,  750000,  750000,  750000, 750000, },
	[5] = { 338,  837500,  837500,  825000,  812500,  800000,  787500,  775000,  762500,  750000,  737500,  725000,  712500,  700000,  700000,  700000, 700000, },
	[6] = { 273,  787500,  787500,  775000,  762500,  750000,  737500,  725000,  712500,  700000,  687500,  675000,  662500,  650000,  650000,  650000, 650000, },
	[7] = { 200,  737500,  737500,  725000,  712500,  700000,  687500,  675000,  662500,  650000,  637500,  625000,  612500,  600000,  600000,  600000, 600000, },
};

const u32 volt_table_int[SYSC_DVFS_END_LVL_INT+1][MAX_ASV_GROUP+1]  = {
	[0] = { 334,  950000,  950000,  925000,  900000,  875000,  850000,  825000,  825000,  825000,  825000,  825000,  825000,  825000, 825000,  825000,  825000, },
	[1] = { 333,  850000,  850000,  825000,  800000,  775000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000, },
	[2] = { 275,  725000,  725000,  700000,  675000,  650000,  625000,  625000,  625000,  625000,  625000,  625000,  625000,  625000,  625000,  625000,  625000, },
};


const u32 volt_table_cpu_V02[SYSC_DVFS_END_LVL_CPU+1][MAX_ASV_GROUP+1]  = {	
	[0]  = { 1703, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, },
	[1]  = { 1586, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, 1275000, },
	[2]  = { 1495, 1275000, 1275000, 1275000, 1250000, 1225000, 1200000, 1175000, 1175000, 1175000, 1175000, 1175000, 1175000, 1175000, 1175000, 1175000, 1175000, },
	[3]  = { 1404, 1250000, 1250000, 1225000, 1200000, 1175000, 1150000, 1125000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, },
	[4]  = { 1300, 1150000, 1150000, 1125000, 1100000, 1075000, 1050000, 1050000, 1050000, 1050000, 1050000, 1050000, 1050000, 1050000, 
1050000, 1050000, 1050000, },
	[5]  = { 1196, 1125000, 1125000, 1100000, 1075000, 1050000, 1025000, 1000000, 1000000, 1000000, 1000000,  1000000, 1000000, 1000000,  1000000, 1000000, 1000000, },
	[6]  = { 1105, 1100000, 1100000, 1075000, 1050000, 1025000, 1000000,  975000,  975000,  975000,  975000,  975000,  975000,  975000,  975000,  975000,  975000, },
	[7]  = { 1001, 1050000, 1050000, 1025000, 1000000,  975000,  950000,  925000,  925000,  925000,  925000,  925000,  925000,  925000, 925000,  925000,  925000, },
	[8]  = {  897, 1000000, 1000000,  975000,  950000,  925000,  900000,  875000,  875000,  875000,  875000,  875000,  875000,  875000, 875000,  875000,  875000, },
	[9]  = {  806,  775000,  775000,  750000,  725000,  700000,  675000,  650000,  650000,  650000,  650000,  650000,  650000,  650000,  650000,  650000,  650000, },
	[10] = {  702,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[11] = {  598,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[12] = {  507,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[13] = {  403,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[14] = {  299,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
};
const u32 volt_table_g3d_V02[SYSC_DVFS_END_LVL_G3D+1][MAX_ASV_GROUP+1]  = {
	[0] = { 910, 1250000, 1250000, 1250000, 1225000, 1200000, 1175000, 1150000, 1150000, 1150000, 1150000, 1150000, 1150000, 1150000, 1150000, 1150000, 1150000, },
	[1] = { 845, 1225000, 1225000, 1200000, 1175000, 1150000, 1125000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, 1100000, },
	[2] = { 734, 1175000, 1175000, 1150000, 1125000, 1100000, 1075000, 1050000, 1025000, 1025000, 1025000, 1025000, 1025000, 1025000, 1025000,  1025000, 1025000, },
	[3] = { 667, 1150000, 1150000, 1125000, 1100000, 1075000, 1050000, 1025000, 1025000, 1025000, 1025000, 1025000, 1025000, 1025000,  1025000, 1025000, 1025000, },
	[4] = { 533, 1025000, 1025000, 1000000,  975000,  950000,  925000,  900000,  875000,  850000,  850000,  850000,  850000,  850000,  850000,  850000,  850000, },
	[5] = { 350,  875000,  875000,  850000,  825000,  800000,  775000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000,  750000, },
	[6] = { 266,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
	[7] = { 160,  625000,  625000,  600000,  575000,  550000,  525000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000,  500000, },
};

const u32 volt_table_mif_V02[SYSC_DVFS_END_LVL_MIF+1][MAX_ASV_GROUP+1]  = {
	[0] = { 825, 1087500, 1087500, 1075000, 1067500, 1050000, 1037500, 1025000, 1012500, 1000000,  987500,  975000,  967500,  950000,  937500,  925000, 912500, },
	[1] = { 728, 1037500, 1037500, 1025000, 1012500, 1000000,  987500,  975000,  967500,  950000,  937500,  925000,  912500,  912500,  912500,  900000,  887500, },
	[2] = { 666,  975000,  975000,  967500,  967500,  950000,  937500,  925000,  912500,  900000,  887500,  875000,  862500,  850000,  850000, 850000, 850000, },
	[3] = { 559,  937500,  937500,  925000,  912500,  900000,  887500,  875000,  867500,  850000,  837500,  825000,  812500,  800000,  800000,  800000, 800000, },
	[4] = { 413,  912500,  912500,  900000,  887500,  875000,  867500,  850000,  837500,  825000,  812500,  800000,  800000,  800000, 800000,  800000,  800000, },
	[5] = { 338,  868750,  868750,  850000,  837500,  825000,  812500,  800000,  787500,  775000,  762500,  750000,  750000,  750000, 750000,  750000,  750000, },
	[6] = { 273,  812500,  812500,  800000,  787500,  775000,  762500,  750000,  737500,  725000,  712500,  700000,  700000,  700000, 700000,  700000,  700000, },
	[7] = { 200,  762500,  762500,  750000,  737500,  725000,  712500,  700000,  687500,  675000,  662500,  650000,  650000,  650000, 650000, 650000, 650000, },
};

const u32 volt_table_int_V02[SYSC_DVFS_END_LVL_INT+1][MAX_ASV_GROUP+1]  = {
	[0] = { 334, 975000,  975000,  950000,  925000,  900000,  875000,  850000,  850000,  850000,  850000, 850000, 850000, 850000, 850000, 850000, 850000, },
	[1] = { 333, 875000,  875000,  850000,  825000,  800000,  775000,  750000,  750000,  750000,  750000, 750000, 750000, 750000, 750000, 750000, 750000, },
	[2] = { 275, 750000,  725000,  700000,  675000,  650000,  625000,  600000,  600000,  600000,  600000, 600000, 600000, 600000, 600000,  600000,  600000, },
};

#endif // _ASV_VOLTAGE_TABLE_H_

